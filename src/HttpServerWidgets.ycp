/**
 * File:	modules/HttpServerWidgets.ycp
 * Package:	Configuration of http-server
 * Summary:	Widgets used by HTTP server configuration
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{
    module "HttpServerWidgets";

    textdomain "http-server";

    import "IP";
    import "Label";
    import "Popup";
    import "Report";
    import "String";
    import "LogView";
    import "CWM";
    import "HttpServer";
    
    include "http-server/routines.ycp";
    include "http-server/helps.ycp";

global string currenthost = "defaulthost";

/**
 * Map of popups for CWM
 */
global map popups = $[
	    "ServerName" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Server Name"),
		    "optional" : false,
		],
		"popup" : $[
		    "widget" : `textentry,
		],
	    ],
/*	    "DocumentRoot" : $[
		"table" : $[
		    // table cell
		    "label" : _("Document Root"),
		    "optional" : false,
		    "immutable" : true,
		],
		"popup" : $[
		    "widget" : `textentry,
		],
            ],*/
	    "ServerAdmin" : $[
		"table" : $[
		    // table cell
		    "label" : _("Server Administrator E-Mail"),
		    "optional" : false,
		],
		"popup" : $[
		    "widget" : `textentry,
		],
            ],
            "Listen" : $[
                "table" : $[
                    // table cell
                    "label" : _("Listen on"),
                    "handle" : `listen,
                    "optional" : false,
		    "summary" : ``( HttpServerWidgets::summaryGenericList() ),
                ],
	    ],
	];


global map defaulthostwidget = CWM::CreateTableDescr (
	    $["add_delete" : true, 
	      "up_down" : false, 
	      "unique_keys" : true]
	, $[
	    "init" : ``(CWM::TableInit (
		HttpServerWidgets::widgets["global_table"]:$[])),
	    "handle" : ``(HttpServerWidgets::handleDefaultHostTable()),
	    "validate_type" : `function,
	    "validate_function" : ``(HttpServerWidgets::validateDefaultHostTable ()),
	    "options" : popups,
	    "ids" : ``(HttpServerWidgets::DefaultHostTableContents ()),
	    "fallback" : $[
		"init" : ``(HttpServerWidgets::DefaultHostPopupInit ()),
		"store" : ``(HttpServerWidgets::DefaultHostPopupStore ()),
		"summary" : ``(HttpServerWidgets::DefaultHostTableEntrySummary ()),
	    ],
	    "option_delete" : ``(HttpServerWidgets::DefaultHostTableEntryDelete ()),
	    "add_items" : [ "ServerName", "ServerAdmin",],
	    "help" : HELPS["global_table"]:"",
	]);


global map moduleslistwidget = $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		`Table (`id (`modules), `header (
		    // table header: module name
		    _("Name"),
		    // table header: module status
		    _("Status")+"    ",
		    // table header: module description
		    _("Description")
		), []),
		`HBox (
		    `PushButton (`id (`toggle),
		    // translators: toggle button label
			_("&Toggle Status") ),
		    `HStretch (),
		    `PushButton (`id (`add_user),
		    // translators: add user-defined module button label
			_("&Add Module") )
		)
	    ),
	    "init" : ``(HttpServerWidgets::initModules ()),
	    "store" : ``(HttpServerWidgets::storeModules ()),
	    "handle" : ``(HttpServerWidgets::handleModules ()),
	    "help" : HELPS["modules"]:"",
	];

global map listenwidget = $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		// translators: radio button group label
		`Left(`Label( _("Listen on Ports:") ) ),
		`Table (`id (`listen), `header (
		    // table header
		    _("Network Address"),
		    // table header
		    _("Port")
		), []),
		`HBox (
		    `PushButton (`id (`add), `opt (`key_F3),
			Label::AddButton ()),
		    `PushButton (`id (`edit), `opt (`key_F4),
			Label::EditButton ()),
		    `PushButton (`id (`delete), `opt (`key_F5),
			Label::DeleteButton ()),
		    `HStretch ()
		)
	    ),
	    "init" : ``(HttpServerWidgets::initListenSettings ()),
	    "store" : ``(HttpServerWidgets::storeListenSettings ()),
	    "handle" : ``(HttpServerWidgets::handleListenSettings ()),
	    "help" : HELPS["listen"]:"",
	];
/**
 * Map of widgets for CWM
 */
global map widgets = $[
	    "server_enable" : $[
		"widget" : `radio_buttons,
		// translator: server enable/disable radio button group
		"label"	 : _("HTTP &Service"),
		"items"	 : [
		    // translators: service status radio button label
		    [ `disabled, _("Disabled") ],
		    // translators: service status radio button label
		    [ `enabled, _("Enabled") ]
		],
		"init"	: ``(HttpServerWidgets::initServiceStatus() ),
		"handle" : ``(HttpServerWidgets::handleServiceStatus()),
		"store"	 : ``(HttpServerWidgets::storeServiceStatus() ),
		"handle_events" : [ `enabled, `disabled ],
		"opt" : [ `notify ],
		"help" : HELPS["server_enable"]:"",
	    ],
	    "firewall_adapt" : $[
		"widget" : `checkbox,
		// translators: checkbox label
		"label"	 : _("Adapt &Firewall"),
		"help"	 : HELPS["firewall_adapt"]:"",
		"init"	: ``(HttpServerWidgets::initAdaptFirewall() ),
		"store"	 : ``(HttpServerWidgets::storeAdaptFirewall() ),
	    ],
	    "global_table" : defaulthostwidget,
	    "modules" : moduleslistwidget,
	    "listen" : listenwidget,
	];

/******************************** Listen popup ****************************/

    /**
     * Show a popup for editing Listen statement.
     *
     * @param network 	initial value for the network part of the statement
     *                  If empty or _("All Addresses"), considered for all Listen for all interfaces.
     * @param port	initial value for a port number
     * @return string	the new Listen statement or nil if Cancel was pressed
     */
    define string AskListen( string network, string port ) ``{
	// translators: all network addresses Listen type
	boolean adr_type = ( network == _("All Addresses") || network == "" );
	if( port == nil ) port = "";
	
	// translators: Listen type for all addresses;
	string aa =  _("All Addresses");
	
	list ips = union( [ aa ], maplist( string ip, string dev, HttpServer::ip2device, ``( ip ) ) );

	UI::OpenDialog( `VBox(
	    // translators: text entry label
	    `TextEntry( `id(`port), _("&Port:"), port ),
	    // translators: combo box label for list of configured IPs
	    `Left( `ComboBox( `id(`address), _("Network &Address:"), ips ) ),
	    `VSpacing(),
	    `HBox( 
		`PushButton( `id(`ok), Label::OKButton() ),
		`PushButton( `id(`cancel), Label::CancelButton() )
	     )
	));
	
	if( !adr_type ) {
	    UI::ChangeWidget( `id( `address ), `Value, network );
	}
	
	symbol ret = nil;
	string network = nil;
	string res = "";
	do {

	    ret = UI::UserInput();
	    
	    if( ret == `ok ) {
		network = UI::QueryWidget( `id(`address), `Value );
		res = UI::QueryWidget( `id(`port), `Value );
		boolean single_address = ( network != aa );
		
		// validation
		if( ! regexpmatch( res, "^[ \t]*[0-9]+[ \t]*$" ) ) {
		    // translators: error message when validating Listen statement
		    Popup::Error( _("Invalid port number.") );
		    ret = nil;
		    continue;
		}
		
		if( size(network) != 0 && single_address ) {
		    res = network +":"+ res;
		}
	    }
	} while( ret != `ok && ret != `cancel );
	
	if( ret == `cancel ) res = nil;
	
	UI::CloseDialog();
	
	return res;
    }	
    
// *************************************** log popups **************************

    /**
      * Handle function of the access log button (the first defined access log file)
      * @param key any key of the widget
      * @param event map event that occured
      * @return value for wizard sequencer, always nil
      */
    global define any showAccessLogPopup (any key, map event) ``{
	string log = select( GetLogs( HttpServer::settings["apache_access_log"]:"", HttpServer::settings[currenthost, "CustomLog"]:[] ), 0, "/var/log/apache2/access_log" );

	// strip the log format, if present
	log = select( splitstring( log, " " ), 0, "/var/log/apache2/access_log" );

	LogView::Display ($[
	    "command" : sformat( "tail -f %1 -n 100 | /usr/sbin/logresolve2", log ),
	    "save" : true,
	    "actions" : [
		// menubutton entry, try to keep short
		[ _("&Reload HTTP Server"),
		    ``{SCR::Execute (.target.bash,
			"rcapache2 reload");}],
		// menubutton entry, try to keep short
		[ _("Save Settings and Re&start HTTP Server"),
		    ``{HttpServer::Write ();}, true ],
	    ],
	]);
	return nil;
    }

    /**
      * Handle function of the error log button
      * @param key any key of the widget
      * @param event map event that occured
      * @return value for wizard sequencer, always nil
      */
    global define any showErrorLogPopup (any key, map event) ``{
	string log = HttpServer::settings[currenthost, "ErrorLog"]: "/var/log/apache2/error_log";
	
	// strip the log format, if present
	log = select( splitstring( log, " " ), 0, "/var/log/apache2/error_log" );

	LogView::Display ($[
	    "command" : sformat( "tail -f -n +100  %1 | /usr/sbin/logresolve2", log ),
	    "save" : true,
	    "actions" : [
		// menubutton entry, try to keep short
		[ _("Reload HTTP Server"),
		    ``{SCR::Execute (.target.bash,
			"rcapache2 reload");}],
		// menubutton entry, try to keep short
		[ _("Save Settings and Restart HTTP Server"),
		    ``{HttpServer::Write ();} ],
	    ],
	]);
	return nil;
    }

// ************************************ default host table ********************

    /**
      * Function for getting contents of the default host table
      * @param descr map description map of the table
      * @return list of items for the table
      */
    global define list DefaultHostTableContents (map descr) ``{
	list ret = maplist (`k, `v, HttpServer::settings[currenthost]:$[], ``(k));
	// required entries
	ret = union (["ServerName", "ServerAdmin", "Listen" ], ret);
	return ret;
    }
    
    /**
      * Delete function of the global table
      * @param opt_id any option id of selected option
      * @param opt_key any option key of selected option
      * @return boolean true if was really deleted
      */
    global define boolean DefaultHostTableEntryDelete (any opt_id, any opt_key) ``{
	// message popup
	if (! Popup::YesNo (_("Delete selected entry?")))
	    return false;
	HttpServer::settings[currenthost]
	    = filter (`k, `v, HttpServer::settings[currenthost]:$[], ``(k != opt_id));
	return true;
    }

    /**
     *  Handler for editing default host. Handles additional buttons, like logs and modules.
     *  Rest is passed to CWM::TableHandle.
     *
     *  @param key	the key modified
     *  @param event	event description
     *  @return symbol 	the result of the handling
     */
    global define symbol handleDefaultHostTable( any key, map event ) ``{
	// handle menu button entries
	if( event["ID"]:nil == `modules ) 
	    return `modules;
	else if( event["ID"]:nil == `show_access_log ) {
	    return showAccessLogPopup( key, event );
	}
	else if( event["ID"]:nil == `show_error_log ) {
	    return showErrorLogPopup( key, event );
	}
	else if( event["ID"]:nil == `listen )
	    return `listen;

	// default handling
	return CWM::TableHandle( widgets["global_table"]:$[], key, event );
    }

    /**
      * Fallback initialization function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void DefaultHostPopupInit (any opt_id, any opt_key) ``{
	UI::ChangeWidget (`id (opt_key), `Value,
	    HttpServer::settings[currenthost, opt_key]:"not found");
	UI::SetFocus (`id (opt_key));
    }

    /**
      * Validation of the default host configuration.
      *
      * @param key any option key
      * @param event any event happened
      * @return boolean	true if there is at least one Listen statement
      */
    global define boolean validateDefaultHostTable (any key, any event) ``{
	if( event["ID"]:nil != `next ) return true;
	// Listen list cannot be empty
	boolean validate = size( HttpServer::settings[currenthost, "Listen"]:[] ) != 0;

	y2debug( "Validation result: %1", validate );
	
	if( !validate ) {
	    Popup::Error(_("The list of the ports to which the server should
listen cannot be empty.
") );
	}
	
	return validate;
    }

    /**
      * Fallback store function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void DefaultHostPopupStore (any opt_id, any opt_key) ``{
	HttpServer::settings[currenthost, opt_key] = UI::QueryWidget (`id (opt_key), `Value);
	HttpServer::modified = true;
    }

    /**
      * Fallback summary function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      * @return string table entry summary
      */
    global define string DefaultHostTableEntrySummary (any opt_id, any opt_key) ``{
	return sformat ("%1", HttpServer::settings[currenthost, opt_key]:"");
    }


// ************************************ modules list ***************************

    /**
      * Initialize function of a widget
      * @param key any widget key of widget that is processed
      */
    global define void initModules (any key) ``{
	integer index = -1;
	list items = maplist (string mod, map z, HttpServer::settings["modules"]:$[], ``{
	    index = index + 1;
	    return `item (`id (index), mod, z["status"]:false ? _("Enabled") : _("Disabled"), z["description"]:"" );
	});
	UI::ChangeWidget (`id (`modules), `Items, items);
	UI::SetFocus (`id (`modules));
    }

    /**
      * Store function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      */
    global define void storeModules (any key, map event) ``{
	integer i = size(HttpServer::settings["modules"]:$[]);
	while( i>0 ) {
	    term item = UI::QueryWidget( `id(`modules), `Item(i-1) );
	    string mod = select( item, 1, "" );
	    y2debug( "Changing %1 to %2", mod, (select( item, 2, "" ) == _("Enabled") ) );
	    HttpServer::settings["modules", mod, "status"] = (select( item, 2, "" ) == _("Enabled") );	
	    i = i-1;
	    // FIXME: this needs to care about flags as well (SSL)
	}
	
	y2debug( "%1", HttpServer::settings["modules"]:$[] );
    }

    /**
      * Handle function of a widget
      * @param key any widget key of widget that is processed
      * @param event any event that occured
      * @return symbol symbol for WS or nil
      */
    global define symbol handleModules (any key, map event) ``{
	UI::SetFocus (`id (`modules));
	integer current = UI::QueryWidget (`id (`modules), `CurrentItem);
        if (event["ID"]:nil == `toggle)
        {
	    integer ci = UI::QueryWidget( `id( `modules ), `CurrentItem );
	    string status = select( UI::QueryWidget( `id(`modules), `Item(ci) ), 2, _("Enabled") );
	    string name = select( UI::QueryWidget( `id(`modules), `Item(ci) ), 1, nil );

	    y2debug( "Status of module: %1", status );
	    if( status == _("Enabled") ) status = _("Disabled");
	    else status = _("Enabled");
	    UI::ChangeWidget( `id( `modules ), `Item( ci , 1 ) , status );
	    
	    HttpServer::modules_modified = union( HttpServer::modules_modified, [name] );
	    y2debug( "modified_modules now: %1", HttpServer::modules_modified );
	    
	    HttpServer::modified = true;
        }
	else if (event["ID"]:nil == `add_user)
        {
	   UI::OpenDialog(
            `VBox(
		// translators: text entry label for adding a user-defined module
                `TextEntry(`id(`mod), _("New Module &Name:")),
                `HBox(
                    `PushButton(`id(`ok), `opt(`default), Label::OKButton() ),
                    `PushButton(`id(`cancel), Label::CancelButton() )
            	    )
        	)
    	    );
	    
	    UI::SetFocus( `id( `mod ) );

	    symbol ret = UI::UserInput();
	    
	    if( ret == `ok ) {
		string mod = String::CutBlanks( UI::QueryWidget( `id(`mod), `Value ) );
		if( mod == "" ) {
		    // translators: error message
		    Report::Error( _("A name for the module to add is required.") );
		    UI::CloseDialog();
		} else if( haskey( HttpServer::settings["modules"]:$[], mod )  ) {
		    // translators: error message
		    Report::Error( _("The module is already in the list.") );
		    UI::CloseDialog();
		} else {
		    HttpServer::settings["modules", mod] = $[
			"status" : true,
			"description" :  _("User-Defined Module"),
		    ];

		    HttpServer::modified = true;
		    HttpServer::modules_modified = union( HttpServer::modules_modified, [mod] );
		    
		    UI::CloseDialog();
		    
		    HttpServerWidgets::initModules(nil);
		}
	    }
	    else UI::CloseDialog();
        }

    }

// ************************************ listen settings ************************

    /**
      * Initialize function of a widget
      * @param key any widget key of widget that is processed
      */
    global define void initListenSettings (any key) ``{

	integer id = -1;
	list listen = HttpServer::settings[currenthost, "Listen"]:[];
	list items = maplist( string litem, listen, ``{ id = id+1; return listen2item(litem, id); } );
	UI::ChangeWidget (`id (`listen), `Items, items);
	
	// enable/disable buttons - at least single Listen must be present
	UI::ChangeWidget (`id (`delete), `Enabled, size( listen ) > 1 );
	
	// set focus
	UI::SetFocus (`id (`listen));
    }

    /**
      * Store function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      */
    global define void storeListenSettings (any key, map event) ``{
	integer i = size(HttpServer::settings[currenthost, "Listen"]:[]);
	list newlisten = [];
	while( i>0 ) {
	    term item = UI::QueryWidget( `id(`listen), `Item(i-1) );
	    newlisten = add( newlisten, item2listen( select(item,1,""), select(item,2,"") ) );
	    i = i-1;
	}
	
	HttpServer::modified = (HttpServer::settings[currenthost, "Listen"]:[] == newlisten );
	HttpServer::settings[currenthost, "Listen"] = newlisten;
    }

    /**
      * Handle function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      * @return symbol symbol for WS or nil
      */
    global define symbol handleListenSettings (any key, map event) ``{
	UI::SetFocus (`id (`listen));
	integer current = UI::QueryWidget (`id (`listen), `CurrentItem);
	term currentitem = UI::QueryWidget( `id(`listen), `Item(current) );
	string network = select(currentitem, 1, "");
	// translators: all network addresses Listen type
	if( network == _("All Addresses") ) network = "";
	string port = select(currentitem, 2, "");

        if (event["ID"]:nil == `add)
        {
	    // translators: all network addresses Listen type
	    string res = AskListen( _("All Addresses"), "" );
	    if( res != nil ) {
		if( contains( HttpServer::settings[currenthost, "Listen"]:[], res )  )
		{
		    // translators: error message for adding a new Listen statement
		    Popup::Error( sformat(_("The entry '%1' already exists."), res) );
		} 
		else
		{
		    HttpServer::settings[currenthost,"Listen"] = 
			add( HttpServer::settings[currenthost, "Listen"]:[], res );
		}
	    }
        }
	else if( event["ID"]:nil == `delete )
	{
	    string res = item2listen( network, port );
	    HttpServer::settings[currenthost, "Listen"] = 
		filter( string litem, HttpServer::settings[currenthost, "Listen"]:[], ``(litem != res) );
	}
	else if( event["ID"]:nil == `edit )
	{
	    string res = AskListen( network, port );
	    if( res != nil ) {
		HttpServer::settings[currenthost, "Listen"] = add( 
		    filter( string litem, HttpServer::settings[currenthost, "Listen"]:[], ``(litem != item2listen(network, port)) ),
		    res );
	    }
	}
	
	initListenSettings(nil);
    }

    
// ************************************ server status ***********************

    /**
      * Initialize function of a widget
      * @param key any widget key of widget that is processed
      */
    global define void initServiceStatus (any key) ``{
	if( HttpServer::settings["settings", "enabled"]:false  ) {
	    UI::ChangeWidget (`id (`enabled), `Value, true);
	}
	else 
	{
	    UI::ChangeWidget (`id (`disabled), `Value, true);
	}
    }

    /**
      * Store function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      */
    global define void storeServiceStatus (any key, map event) ``{
	HttpServer::enableService( UI::QueryWidget ( `id(`enabled), `Value ) );
    }

    /**
      * Handle function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      * @return symbol symbol for WS or nil
      */
    global define symbol handleServiceStatus (any key, map event) ``{
	boolean current = UI::QueryWidget (`id (`enabled), `Value);
	HttpServer::settings["enabled"] = current;
    }
// *********************************** Listen widget ***************************

    /**
     * Handler for the summary of Listen statements list.
     *
     * @param key	key to be configured
     * @param id	identification of the widget, not used
     * @return string	the new value
     */
    global define string summaryGenericList( any key, any id ) ``{
	return mergestring( HttpServer::settings[currenthost, key]:[], " ");
    }

// ************************************ Adapt firewall widget ********************

    /**
      * Initialization function for firewall adapting
      * @param key any option key to be initialized
      */
    global define void initAdaptFirewall (any key) ``{
	if( HttpServer::settings["settings", "firewall_started"]:false ) {
	    UI::ChangeWidget (`id (key), `Value,
		HttpServer::settings["settings", "firewall"]:false);
	} else {
	    // disable the widget
	    UI::ChangeWidget (`id (key), `Enabled, false );
	}
    }

    /**
      * Store function for firewall adapting
      * @param opt_id any option id
      * @param event map event description
      */
    global define void storeAdaptFirewall (any opt_id, map event) ``{
	if( HttpServer::settings["settings", "firewall_started"]:false ) {
	    HttpServer::settings["settings", "firewall"] = UI::QueryWidget (`id (opt_id), `Value);
	    HttpServer::modified = true;
	}
    }

/* EOF */
}

