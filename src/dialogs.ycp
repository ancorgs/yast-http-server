/**
 * File:	include/http-server/dialogs.ycp
 * Package:	Configuration of http-server
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

    textdomain "http-server";

    import "YaST::HTTPDData";
    import "HttpServer";
    import "HttpServerWidgets";

    import "Mode";
    import "Popup";
    import "ProductFeatures";
    import "Label";
    import "CWM";
    import "Wizard";






    /**
      * Ask for confirmation (always)
      * @return true if abort is confirmed
      */
    boolean ReallyAbortAlways () ``{
        return Popup::ReallyAbort (true);
    }


    boolean Abort () {
	return ( !HttpServer::modified || Popup::ReallyAbort(true) );
    }



    /**
      * Run server overview dialog
      * @return symbol for wizard sequencer
      */
    symbol OverviewDialog () {
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    "server_enable",
	    `VSpacing (1),
	    `Left("firewall_adapt"),
	    `VSpacing (1),
	    "overview_widget"
	), `HSpacing (1));
	// dialog caption
	string caption = _("HTTP Server Configuration");

	return CWM::ShowAndRunOrig (["server_enable", "firewall_adapt", "overview_widget" ]
	    ,HttpServerWidgets::widgets
	    ,contents, caption,
	    Label::BackButton (), Label::FinishButton (), $[`abort : Abort]);
    }

    /**
      * Run single host configuration dialog
      * @return symbol for wizard sequencer
      */
    symbol HostDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["host" ],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (1)
	), `HSpacing (1));

	// translators: dialog caption
	string caption = sformat(_("Host '%1' Configuration"), 
	    // translators: human-readable "default host"
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") 
		: HttpServerWidgets::get_host_value ( "ServerName"
		, YaST::HTTPDData::GetHost(HttpServerWidgets::currenthost), HttpServerWidgets::currenthost ));

	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	symbol ret = CWM::Run (w, $[`abort : Abort]);
	if (ret == `back) {
	HttpServerWidgets::setHostOptions(nil);
			}
	return ret;
    }

    /**
      * Run modules dialog
      * @return symbol for wizard sequencer
      */
    symbol ModulesDialog () {
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    "modules",
	    `VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = _("Server Modules");

	return CWM::ShowAndRunOrig (["modules"], HttpServerWidgets::widgets, contents, caption,
	  Label::BackButton(), Label::OKButton(), $[`abort : Abort]);
    }

    /**
      * Run virtual host list dialog
      * @return symbol for wizard sequencer
      */
    symbol HostsDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["hosts"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = _("Configured Hosts");
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	UI::ReplaceWidget( `id(`_tp_table_repl),
	    // menu button label
	    `PushButton( `id( `set_default ), _("Set as De&fault") ) );

	return CWM::Run (w, $[`abort : Abort]);
    }

    /**
      * Run server settings edit dialog
      * @return symbol for wizard sequencer
      */
    symbol ListenDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["listen"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));
	// dialog caption for Listen statements configuration
	string caption = _("Listen Ports and Addresses");
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (w, $[`abort : Abort]);
    }

	/**
	  * Return wizard for adding new virtual host	
	  *
	  */
global list< map<string,any> > descr = [];
    symbol AddHost () {
	term contents = `HBox( `HSpacing(0.5), `VBox (
	    `Frame(
		// translators: frame title for new hsot identification details
		_("Server Identification"),
		`VBox(
		    // translators: textentry, new host server name
		    `TextEntry( `id( "servername" ), _("Server &Name:") ),
		    `HBox(
			// translators: textentry, document root for the new host
			`TextEntry( `id( `documentroot ), _("Server &Contents Root:") ),
			`VBox(
                	    `Label(""),
			    `PushButton( `id( `browse ), Label::BrowseButton () )
			)
		    ),
		    // translators: textentry, administrator's e-mail for the new host
		    `TextEntry( `id( `admin ), _("&Administrator E-Mail:") )
		)),
	    `VSpacing (1),
	    `Frame(
		// translators: frame title for method of incoming request resolution
		_("Server Resolution"),
		`VBox(
		// translators: IP address for the new host
		`Left( `ComboBox( `id( "ipaddress" ), `opt(`editable), _("&IP Address:"), maplist( string ip, string dev, HttpServer::ip2device, ``(ip) ) ) ),
		`RadioButtonGroup(
		    `id ( `resolution ),
		    `VBox (
			// translators: radio button for name-based virtual hosts
			`Left(`RadioButton ( `id ( `name_based ), _("Determine Request Server by HTTP &Headers"), true ) ),
			// translators: radio button for IP-based virtual hosts
			`Left(`RadioButton ( `id ( `ip_based ), _("Determine Request Server by Server IP &Address") ) )
		    )
		))),
		`HSpacing (0.5)
	));

	// translators: dialog caption
	string caption = _("New Host Information");

	string help = HELPS ["add_host_general"]:"";

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::NextButton ());
	    
	UI::SetFocus (`id("servername"));

	symbol ret = nil;

	do {
	    ret = (symbol)UI::UserInput ();

	    if (ret == `browse)
	    {
		// Allow to choose a directory
		string dir = UI::AskForExistingDirectory ("/srv", _("Choose Document Root") );
		if (dir != nil) UI::ChangeWidget (`documentroot, `Value, dir );

		ret = nil;
	    }
	    if (ret == `abort || ret == `cancel)
	    {
		if (ReallyAbort ()) break;
	    }

	    if (ret == `next )
	    {
		// FIXME: Do checks about the IP address availability
		string ip = (string) UI::QueryWidget ( `id("ipaddress"), `Value );
		string servername = (string) UI::QueryWidget( `id("servername"), `Value );
		string documentroot = (string) UI::QueryWidget( `documentroot, `Value );
		string admin = (string) UI::QueryWidget( `admin, `Value );
		boolean virtualbyname = (boolean) UI::QueryWidget( `name_based, `Value );

    		if (! HttpServerWidgets::validate_servername(nil, "servername",nil))
    		{
		    ret = nil;
        	    continue;
    		}

    		if (! HttpServerWidgets::validate_serverip("ipaddress",nil,nil))
    		{
		    ret = nil;
        	    continue;
    		}
		
		if ( size(admin) == 0 )
		{
		
		    // translators: error popup
		    string invalid = _("Administrator E-Mail is invalid.");
		    
		    // translators: error popup
		    Popup::Error ( _("Administrator E-Mail cannot be empty.") );
		    ret = nil;
        	    continue;
		}

		descr = [
			$[ "KEY": "DocumentRoot", "VALUE" : documentroot ],
			$[ "KEY": "ServerName", "VALUE" : servername ],
			$[ "KEY": "ServerAdmin", "VALUE" : admin ],
			$[ "KEY": "VirtualByName", "VALUE" : virtualbyname ? "1" : "0" ],
			$[ "KEY": "HostIP", "VALUE" : ip ]
		    ];
		    
		if ( !HttpServerWidgets::validate_server (nil, descr) )
		{
		    ret = nil;
		    continue;
		}
		
	    }
	} while (ret == nil);

	return ret;
    };


symbol  SetVHostOptions() {
        term contents = `HBox( `HSpacing(0.5), `VBox (
            `Frame(
                // translators: frame title for virtual host identification details
                _("CGI Options"),
                `VBox(
                 `Left(
                   `CheckBox(`id(`cgi_support), _("Enable CGI For This Virtual Host"))),
                   `HBox(
                        // translators: textentry, certificate file path
                        `TextEntry( `id( `cgi_dir ), _("CGI - Directory Path:") ),
                        `VBox(
                            `Label(""),
                            `PushButton(`id(`browse_cgi_dir ), Label::BrowseButton () )
                        ))

                )),
		`VSpacing (1),
               `Frame(
                _("SSL Support"),
                 `VBox(
                  `Left(
                   `CheckBox(`id(`ssl_support), _("Enable SSL Support For This Virtual Host"))),
                    `HBox(
                        // translators: textentry, certificate file path
                        `TextEntry( `id( `certfile ), _("Certificate File Path:") ),
                        `VBox(
                            `Label(""),
                            `PushButton(`id(`browse_cert ), Label::BrowseButton () )
                        ))

                )),
		`VSpacing (1),
		`Frame(
		 _("Directory Options"),
		 `Left(
		       `TextEntry( `id( `dir_index ), _("Directory Index:") )
                      )
		)
	

		)
        );

        string caption = _("Virtual Host Details");

        string help = HELPS ["add_host_general"]:"";

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());


   map <string, any> ssl_values = $[];
   symbol ret = nil;
   do{
	ret = (symbol)UI::UserInput (); 

        if (ret == `browse_cgi_dir)
         {
          string cgi_dir = UI::AskForExistingDirectory("/srv/www/cgi-bin", _("Choose CGI Directory") );
          if (cgi_dir != nil) UI::ChangeWidget (`cgi_dir, `Value, cgi_dir );

          ret=nil;
         }


	    if (ret == `browse_cert)
	    {
		string ssl_dir = UI::AskForExistingFile("/etc/apache2/ssl.crt", "*.crt *.pem", _("Choose Certificate File") );
                if (ssl_dir != nil) UI::ChangeWidget (`certfile, `Value, ssl_dir );

		ret=nil;
	    }


	if (ret == `next)
	 {
		map <string, any> ip = find(map<string,any> row, descr,``(row["KEY"]:"" == "HostIP"));
		map <string, any> servername = find(map<string,any> row, descr,``(row["KEY"]:"" == "ServerName"));
		map <string, any> documentroot = find(map<string,any> row, descr,``(row["KEY"]:"" == "DocumentRoot"));

		if (UI::QueryWidget(`cgi_support, `Value) == true) 
		 {
		  string alias = "/cgi-bin/ " + (string) UI::QueryWidget(`cgi_dir, `Value);
		  descr = add(descr, $["KEY":"ScriptAlias", "VALUE":alias]);
		  descr = add(descr,  $[
                   "KEY"       : "_SECTION",
                    "SECTIONNAME": "Directory",
                    "SECTIONPARAM": UI::QueryWidget(`cgi_dir, `Value),
                    "VALUE" : [ 
				$["KEY":"AllowOverride", "VALUE":"None"], 
				$["KEY":"Options", "VALUE":"+ExecCGI -Includes"],
				$["KEY":"Order", "VALUE":"allow,deny"],
				$["KEY":"Allow", "VALUE":"from all"]
			      ],
                    "OVERHEAD" : ""]);
		y2milestone("CGI support for virtual host added");
		 }

		if (UI::QueryWidget(`ssl_support, `Value) == true)
		{
		 //TODO - validate certificate
		 if (size((string) UI::QueryWidget(`certfile, `Value)) == 0)
		  {
                    // translators: error popup
                    Popup::Error ( _("Certificate File cannot be empty.") );
                    ret = nil;
                    continue;

		  } else ssl_values = $[
					"KEY":"_SECTION", 
					"SECTIONNAME":"IfDefine", 
					"SECTIONPARAM":"SSL", 
					"VALUE":[ $["KEY":"SSLCertificateFile", "VALUE":UI::QueryWidget(`certfile, `Value)], 
							$["KEY":"SSLEngine", "VALUE":"on"] ]
					];
		}

		if (size(ssl_values)>0) descr = add(descr, ssl_values);


		any result = YaST::HTTPDData::CreateHost ( ip["VALUE"]:""+"/"+servername["VALUE"]:"", descr );

		y2milestone ("%1", result);
		if ( result == nil)
		{
		    map<string,string> error = (map<string,string>) YaST::HTTPDData::Error ();
		    Popup::Error ( error["summary"]:"" );
		    ret = nil;
		    continue;
		}
		descr = YaST::HTTPDData::GetHost(ip["VALUE"]:""+"/"+servername["VALUE"]:"");
		string directory_index=(string)UI::QueryWidget(`dir_index, `Value);
		if (size(directory_index)>0){
		  list< map<string, any> > tmp_descr = [];
		 foreach(map<string, any>value, descr, {
			if (value["KEY"]:"" == "_SECTION" && value["SECTIONNAME"]:"" == "Directory" && (find(value["SECTIONPARAM"]:"", documentroot["VALUE"]:""))>0) 
					value["VALUE"]=add(value["VALUE"]:[], $["KEY":"DirectoryIndex", "VALUE":directory_index]);
			tmp_descr  = add(tmp_descr, value);
			});
//			y2internal("%1", tmp_descr);
			YaST::HTTPDData::ModifyHost(ip["VALUE"]:""+"/"+servername["VALUE"]:"", tmp_descr);
		}

		    
		HttpServer::modified = true;
	}



     }while(ret == nil);
   return ret;
  }

    /**
      * Run host SSL dialog
      * @return symbol for wizard sequencer
      */
    symbol SSLDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["ssl"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// translators: dialog caption, %1 is the host name
	string caption = sformat( _("SSL Configuration for '%1'"),
	    // translators: human-readable "default host"
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") 
		: HttpServerWidgets::get_host_value ( "ServerName"
		, YaST::HTTPDData::GetHost(HttpServerWidgets::currenthost), HttpServerWidgets::currenthost ) );

	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());
	if (ProductFeatures::GetFeature ("globals", "ui_mode") != "simple")
	{
	    UI::ReplaceWidget( `id(`_tp_table_repl),
		//translators: pop up menu
		`MenuButton( _("Certificates"),
		[
			//translators: Certificates pop-up menu item
		    `item (`id( `import_certificate ), _("&Import Server Certificate...") ),
                       //translators: Certificates pop-up menu item
		    `item (`id( `common_certificate ), _("&Use Common Server Certificate") ),
		]));
	}

	return CWM::Run (w, $[`abort : Abort]);
    }

    symbol DirDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["dir"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// translators: dialog caption, %1 is the host name
	string caption = sformat( _("Dir Configuration for '%1'"),
	    // translators: human-readable "default host"
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") 
		: HttpServerWidgets::get_host_value ( "ServerName"
		, YaST::HTTPDData::GetHost(HttpServerWidgets::currenthost), HttpServerWidgets::currenthost ) );

	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (w, $[`abort : Abort]);
    }
/* EOF */
}
