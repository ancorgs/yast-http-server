/**
 * File:	include/http-server/dialogs.ycp
 * Package:	Configuration of http-server
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

    textdomain "http-server";

    import "YaST::HTTPDData";
    import "HttpServer";
    import "HttpServerWidgets";

    import "Mode";
    import "Popup";
    import "ProductFeatures";
    import "Label";
    import "CWM";
    import "CWMTab";
    import "Wizard";
    import "DnsServerAPI";
    import "DnsServer";
    import "Service";
    import "TablePopup";
    import "Package";




    /**
      * Ask for confirmation (always)
      * @return true if abort is confirmed
      */
    boolean ReallyAbortAlways () ``{
        return Popup::ReallyAbort (true);
    }

  /**
   * Abort dialog
   * @return boolean do abort
   */
    boolean Abort () {
	return ( !HttpServer::modified || Popup::ReallyAbort(true) );
    }


map tabs_descr = $[
	"listen" : $[
	  "header" :  _("Listen Ports and Addresses"),
	  "contents" : `HBox (
			`HStretch(),
			`HSpacing (1),
			`VBox (
			    "server_enable",
		            `VSpacing (1),
			    "LISTEN",
			    `VSpacing (1),
			    "firewall_adapt",
		            `VSpacing (1),
			    "logs",
			    `VSpacing(1)
			      ),
			`HSpacing (1),
			`HStretch()
			),
	    "widget_names" : [ "server_enable", "LISTEN", "firewall_adapt", "logs" ]
	 ],
	"modules" : $[
	 "header" : _("Server Modules"),
	 "contents" : `HBox (
			`HSpacing (1),
			 `VBox (
				`VSpacing (1),
				"MODULES" ,
				`VSpacing (1)
			        ) , `HSpacing (1)
			    ),
	"widget_names" : [ "MODULES" ]
	 ],
	"main_host" : $[

	 "header" : _("Main Host"),
	 "contents" : `HBox (`HSpacing (1), `VBox (
            `VSpacing (1),
            "MAIN_HOST",
            `VSpacing (1)
        ), `HSpacing (1)),
	"widget_names" : [ "MAIN_HOST" ]
	 ],
	"hosts" : $[

	 "header" : _("Hosts"),
	 "contents" : `HBox (`HSpacing (1), `VBox (
            `VSpacing (1),
            "HOSTS", 
//`PushButton( `id( `set_default ), _("Set as De&fault") ),
            `VSpacing (1)
//, `PushButton( `id( `set_default ), _("Set as De&fault") )
        ), `HSpacing (1)),
	"widget_names" : [ "HOSTS" ]
	 ]
	];

    /**
      * Run server overview dialog
      * @return symbol for wizard sequencer
      */
    symbol OverviewDialog () {
	string caption = _("HTTP Server Configuration");
    if (HttpServer::firewall_first) tabs_descr["listen", "widget_names"]= [ "server_enable", "LISTEN", "logs" ];
    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": [ "listen", "modules", "main_host", "hosts"],
            "tabs": tabs_descr,
            "widget_descr": HttpServerWidgets::widgets,
            "initial_tab" : HttpServerWidgets::init_tab,
            "tab_help" : "",
        ]),
    ];
    term contents = `VBox( "tab");

    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);

    return ret;
    }


    /**
      * Run single host configuration dialog
      * @return symbol for wizard sequencer
      */
    symbol HostDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["host", "vhost_res" ], HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (1),
	    w[1, "widget"]:`VSpacing (1)
	), `HSpacing (1));

	// translators: dialog caption
	string caption = sformat(_("Host '%1' Configuration"), 
	    // translators: human-readable "default host"
	    HttpServerWidgets::currenthost == "main" ? _("Main Host") 
		: HttpServerWidgets::get_host_value ( "ServerName"
		, YaST::HTTPDData::GetHost(HttpServerWidgets::currenthost), HttpServerWidgets::currenthost ));

	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	symbol ret = CWM::Run (w, $[`abort : ReallyAbort]);
	if (ret == `back) {
	HttpServerWidgets::setHostOptions(nil);
			}
	return ret;
    }


    /**
      * Run virtual host list dialog
      * @return symbol for wizard sequencer
      */
    symbol HostsDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["hosts"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = _("Configured Hosts");
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (w, $[`abort : Abort]);
    }

 list< map<string,any> > descr = [];
	/**
	  * Return wizard for adding new virtual host	
	  * @return symbol (`browse, `abort, `cancel, `next)
	  */
    symbol AddHost () {
	list< map<string,any> > w = CWM::CreateWidgets (["vhost_id", "vhost_res" ], HttpServerWidgets::widgets);
	term contents = `HBox( `HSpacing(0.5), `VBox (
		w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1),
		w[1, "widget"]:`VSpacing (0),
		`HSpacing (0.5)
	));

	// translators: dialog caption
	string caption = _("New Host Information");

	string help = HELPS ["add_host_general"]:"";


	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::NextButton ());
	    
	return CWM::Run (w, $[`abort : Abort]);
    };

  /**
   * Set virtual host options
   * @return symbol from host widget
   */
symbol  SetVHostOptions() {
	list< map<string,any> > w = CWM::CreateWidgets (["vhost_details" ], HttpServerWidgets::widgets);
	term contents = `HBox( `HSpacing(0.5), `VBox (
		w[0, "widget"]:`VSpacing (0),
		`HSpacing (0.5)
	));

	// translators: dialog caption
        string caption = _("Virtual Host Details");

        string help = HELPS ["set_vhost"]:"";


	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::NextButton ());
	    
	return CWM::Run (w, $[`abort : Abort]);
  }

    /**
      * Run host SSL dialog
      * @return symbol for wizard sequencer
      */
    symbol SSLDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["ssl"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// translators: dialog caption, %1 is the host name
	string caption = sformat( _("SSL Configuration for '%1'"),
	    // translators: human-readable "default host"
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") 
		: HttpServerWidgets::get_host_value ( "ServerName"
		, YaST::HTTPDData::GetHost(HttpServerWidgets::currenthost), HttpServerWidgets::currenthost ) );

	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());
	if (ProductFeatures::GetFeature ("globals", "ui_mode") != "simple")
	{
	    UI::ReplaceWidget( `id(`_tp_table_repl),
		//translators: pop up menu
		`MenuButton( _("Certificates"),
		[
			//translators: Certificates pop-up menu item
		    `item (`id( `import_certificate ), _("&Import Server Certificate...") ),
                       //translators: Certificates pop-up menu item
		    `item (`id( `common_certificate ), _("&Use Common Server Certificate") ),
		]));
	}

	return CWM::Run (w, $[`abort : Abort]);
    }

  /**
   * Directory dialog
   * @return symbol from directory widget
   */
    symbol DirDialog () {
	list< map<string,any> > w = CWM::CreateWidgets (["dir"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// translators: dialog caption, %1 is the host name
	string caption = sformat( _("Dir Configuration for '%1'"),
	    // translators: human-readable "default host"
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") 
		: HttpServerWidgets::get_host_value ( "ServerName"
		, YaST::HTTPDData::GetHost(HttpServerWidgets::currenthost), HttpServerWidgets::currenthost ) );

	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (w, $[`abort : Abort]);
    }
/* EOF */
}
