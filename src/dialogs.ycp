/**
 * File:	include/http-server/dialogs.ycp
 * Package:	Configuration of http-server
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

    textdomain "http-server";

    import "HttpServer";
    import "HttpServerWidgets";

    import "Mode";
    import "Popup";
    import "Label";
    import "CWM";
    import "Wizard";

    /**
      * Read settings dialog
      * @return `abort if aborted and `next otherwise
      */
    global define symbol ReadDialog() ``{
	Wizard::RestoreHelp (HELPS["read"]:"");
	boolean ret = HttpServer::Read();
	return ret ? `next : `abort;
    }

    /**
      * Write settings dialog
      * @return `abort if aborted and `next otherwise
      */
    global define symbol WriteDialog() ``{
	Wizard::RestoreHelp (HELPS["write"]:"");
	boolean ret = HttpServer::Write();
	if (! ret && cfg_restart_wanted)
	    return `back;
	return ret ? `next : `abort;
    }

    /**
      * Run default host dialog
      * @return symbol for wizard sequencer
      */
    global define symbol DefaultHostDialog () ``{
	// fix the help for document root, it defined
	if( size(HttpServer::document_root) > 0 ) {
	    HttpServerWidgets::widgets["server_enable", "help" ] = HELPS[ "server_enable" ]:"" + sformat( _("<p>The documents served by
the HTTP server are stored in <i>%1</i>.</p>"), HttpServer::document_root);
	}
	
	list w = CWM::CreateWidgets (["server_enable", "firewall_adapt", "global_table" ],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1),
	    `Left(w[1, "widget"]:`VSpacing (0)),
	    `VSpacing (1),
	    w[2,"widget"]:`VSpacing (0)
	), `HSpacing (1));
	// dialog caption
	string caption = _("HTTP Server Configuration");
	string help = CWM::MergeHelps (w) + HELPS["additional_default"]:"";

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::FinishButton ());
	    
	UI::ReplaceWidget( `id(`_tp_table_repl), 
	    // menu button label
	    `MenuButton( _("Advanced"), 
		// menu button item
		Mode::config ? [ `item( `id( `modules ), _("Server &Modules") ) ]
		// menu button item
		: [ `item( `id( `show_access_log ), _("Show &Access Log") ), 
		    // menu button item
		  `item( `id( `show_error_log ), _("Show &Error Log") ), 
		    // menu button item
		  `item( `id( `modules ), _("Server &Modules") ),
	    ] ) );

	return CWM::Run (w, $[ `abort: ``( !HttpServer::modified || Popup::ReallyAbort(true) ) ]);
    }

    /**
      * Run modules dialog
      * @return symbol for wizard sequencer
      */
    global define symbol ModulesDialog () ``{
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    "modules",
	    `VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = _("Server Modules");

	return CWM::ShowAndRun (["modules"], HttpServerWidgets::widgets, contents, caption,
	  Label::BackButton(), Label::OKButton(), $[`abort: ``( !HttpServer::modified || Popup::ReallyAbort(true) )]);
    }

    /**
      * Run server settings edit dialog
      * @return symbol for wizard sequencer
      */
    global define symbol ListenDialog () ``{
	list w = CWM::CreateWidgets (["listen"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));
	// dialog caption for Listen statements configuration
	string caption = sformat(_("Listen for '%1'"), 
	    // translators: default host label
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") : HttpServerWidgets::currenthost );
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (w, $[`abort: ``( !HttpServer::modified || Popup::ReallyAbort(true) )]);
    }

/* EOF */
}
