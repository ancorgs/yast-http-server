/**
 * File:	include/http-server/dialogs.ycp
 * Package:	Configuration of http-server
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

    textdomain "http-server";

    import "HttpServer";
    import "HttpServerWidgets";

    import "Mode";
    import "Popup";
    import "Label";
    import "CWM";
    import "Wizard";
    
    boolean Abort () {
	return ( !(HttpServer::modified) || Popup::ReallyAbort(true) );    
    }

    /**
      * Run default host dialog
      * @return symbol for wizard sequencer
      */
    symbol OverviewDialog () {
	// fix the help for document root, it defined
	if( size(HttpServer::document_root) > 0 ) {
	    HttpServerWidgets::widgets["server_enable", "help" ] = HELPS[ "server_enable" ]:"" + sformat( _("<p>The documents served by
the HTTP server are stored in <i>%1</i>.</p>"), HttpServer::document_root);
	}
	
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    "server_enable",
	    `VSpacing (1),
	    `Left("firewall_adapt"),
	    `VSpacing (1),
	    "overview_widget"
	), `HSpacing (1));
	// dialog caption
	string caption = _("HTTP Server Configuration");

	return CWM::ShowAndRun (["server_enable", "firewall_adapt", "overview_widget" ]
	    ,HttpServerWidgets::widgets
	    ,contents, caption, 
	    Label::BackButton (), Label::FinishButton (), $[`abort : Abort]);
    }

    /**
      * Run single host configuration dialog
      * @return symbol for wizard sequencer
      */
    symbol HostDialog () {
	list<map> w = CWM::CreateWidgets (["host" ],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = sformat(_("Host '%1' Configuration"), HttpServerWidgets::currenthost);
	string help = CWM::MergeHelps (w) + HELPS["additional_default"]:"";

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());
	    
	return CWM::Run (w, $[`abort : Abort]);
    }

    /**
      * Run modules dialog
      * @return symbol for wizard sequencer
      */
    symbol ModulesDialog () {
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    "modules",
	    `VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = _("Server Modules");

	return CWM::ShowAndRun (["modules"], HttpServerWidgets::widgets, contents, caption,
	  Label::BackButton(), Label::OKButton(), $[`abort : Abort]);
    }

    /**
      * Run virtual host list dialog
      * @return symbol for wizard sequencer
      */
    symbol HostsDialog () {
	list<map> w = CWM::CreateWidgets (["hosts"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));

	// dialog caption
	string caption = _("Configured Hosts");
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());
	    
	UI::ReplaceWidget( `id(`_tp_table_repl), 
	    // menu button label
	    `PushButton( `id( `set_default ), _("Set as De&fault") ) );

	return CWM::Run (w, $[`abort : Abort]);
    }

    /**
      * Run server settings edit dialog
      * @return symbol for wizard sequencer
      */
    symbol ListenDialog () {
	list<map> w = CWM::CreateWidgets (["listen"],
	    HttpServerWidgets::widgets);
	term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    w[0, "widget"]:`VSpacing (0),
	    `VSpacing (1)
	), `HSpacing (1));
	// dialog caption for Listen statements configuration
	string caption = sformat(_("Listen for '%1'"), 
	    // translators: default host label
	    HttpServerWidgets::currenthost == "defaulthost" ? _("Default Host") : HttpServerWidgets::currenthost );
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (w, $[`abort : Abort]);
    }

/* EOF */
}
