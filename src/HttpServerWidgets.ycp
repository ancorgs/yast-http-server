/**
 * File:	modules/HttpServerWidgets.ycp
 * Package:	Configuration of http-server
 * Summary:	Widgets used by HTTP server configuration
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{
    module "HttpServerWidgets";

    textdomain "http-server";

    import "Mode";
    import "IP";
    import "Label";
    import "Popup";
    import "Report";
    import "String";
    import "LogView";
    import "TablePopup";
    import "HttpServer";
    import "HTTPD";
    
    include "http-server/helps.ycp";

global string currenthost = "default";

string item2listen( string network, string port );

string get_host_value ( string keyword, list< map<string, any> > host )
{
    string ret = "";
    
    foreach( map<string, any> option, host, ``{
	if (option["KEY"]:nil == keyword)
	{
	    ret = option["VALUE"]:"";
	    break;
	}
    });
    
    // drop quotes, if exist
    ret = regexpsub (ret, "\"?([^\"]*)\"?", "\\1");
    
    return ret;
}

/*********************************** inital overview table ********************************/

global symbol showAccessLogPopup (any key, map event);
global symbol showErrorLogPopup (any key, map event);

list <string> host_ids = nil;

void OverviewInit (string widget)
{
    string listen_summary = mergestring ( 
	maplist( map<string,string> listen, HTTPD::GetCurrentListen(), 
	    ``(item2listen (listen["ADDRESS"]:"",listen["PORT"]:"80"))), " ");
	    
    string default_host = get_host_value( "ServerName", HTTPD::GetHost ("default"));
    if (default_host == "")
    {
	// if the default host does not have a servername specified, use it's
	// document root, %1 is the full path
	default_host = sformat( _("in %1"), get_host_value( "DocumentRoot", HTTPD::GetHost ("default")));
    }
    
    if (host_ids == nil)
    {
	host_ids = HTTPD::GetHostsList ();
    }
    
    string hosts = mergestring (
	maplist( string host, host_ids, ``{
	    return get_host_value ( "ServerName", HTTPD::GetHost (host) );
	}), " ");

    UI::ChangeWidget (`overview_table, `Items, 
	[
	    `item ( `id(`listen), _("Listen on"), listen_summary ),
	    `item ( `id(`modules), _("Modules"), "" ),
	    `item ( `id(`default), _("Default host"), default_host ),
	    `item ( `id(`hosts), _("Hosts"), hosts ),
	]);
}

symbol OverviewHandle (string table, map event)
{
    if (event["ID"]:nil == `edit)
    {
	symbol id = (symbol)UI::QueryWidget (`overview_table, `CurrentItem);
	currenthost = "default";	// ensure to edit the default host, if `default was selected
	return id;
    }
    // handle menu button entries
    else if( event["ID"]:nil == `show_access_log ) {
	return showAccessLogPopup( table, event );
    }
    else if( event["ID"]:nil == `show_error_log ) {
	return showErrorLogPopup( table, event );
    }

    
    return nil;
}

map<string, any> overview_widget = $[
    "widget"		: `custom,
    "custom_widget"	: 
	`VBox(
	    `Table (`id( `overview_table), `header( _("Option"), _("Value") )),
	    `HBox(
		`PushButton ( `id(`edit), Label::EditButton ()),
		`HStretch(),
		// menu button label
        	`MenuButton( _("&Log Files"),
            	    // menu button item
            	    [ `item( `id( `show_access_log ), _("Show &Access Log") ),
            	    // menu button item
            	    `item( `id( `show_error_log ), _("Show &Error Log") )
        	] )
	    )
	),
    "init"		:  OverviewInit,
    "handle"		:  OverviewHandle,
];

/******************************************************************************************/

void HostsInit (string widget);
symbol HostsHandle (string table, map event);
list HostsContents (map descr);
boolean HostsDelete (any opt_id, any opt_key);

map<string, any> hosts_widget = (map<string, any>)TablePopup::CreateTableDescr (
	$["add_delete" : true, 
	      "up_down" : false, 
	      "unique_keys" : true]
	, $[
	    "init" : HttpServerWidgets::HostsInit,
	    "handle" : HttpServerWidgets::HostsHandle,
	    "ids" : HttpServerWidgets::HostsContents,
	    "option_delete" : HttpServerWidgets::HostsDelete,
	    "help" : HELPS["hosts"]:"",
	]);

void HostsInit (string widget)
{
    TablePopup::TableInit(hosts_widget, widget);
}

symbol HostsHandle (string table, map event)
{
    if ( event["ID"]:nil == `_tp_add )
    {
	return `add;
    }

    else if (event["ID"]:nil == `_tp_edit)
    {
	currenthost = (string)UI::QueryWidget (`_tp_table, `CurrentItem);
	return `edit;
    }
    
    else if (event["ID"]:nil == `set_default)
    {
	y2milestone ("Changing default host");
    }
    
    return nil;
}

list HostsContents (map descr) {
    list<string> l = HTTPD::GetHostsList ();
    
    list<string> res = maplist(
	string host_id,
	l,
	``{
	    return host_id; // FIXME - it should return server name
	});

    return res;
}

boolean HostsDelete (any opt_id, any opt_key) {
    // message popup
    if (! Popup::YesNo (_("Delete selected host?")))
	return false;
    // FIXME:

    return true;
}

/******************************************************************************************/

global string summaryGenericList( any key, any id );
global symbol handleHostTable( any key, map event );
global list HostTableContents (map descr);
global void DefaultHostPopupInit (any opt_id, any opt_key);
global void DefaultHostPopupStore (any opt_id, any opt_key);
global string HostTableEntrySummary (any opt_id, any opt_key);
global boolean HostTableEntryDelete (any opt_id, any opt_key);
global void initModules (any key);
global void storeModules (any key, map event);
global symbol handleModules (any key, map event);
global void initListenSettings (any key);
global void storeListenSettings (any key, map event);
global symbol handleListenSettings (any key, map event);
global void initServiceStatus (any key);
global void storeServiceStatus (any key, map event);
global symbol handleServiceStatus (any key, map event);
global void initAdaptFirewall (any key);
global void storeAdaptFirewall (any opt_id, map event);

/**
 * Map of popups for CWM
 */
global map popups = $[
	    "ServerName" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Server Name"),
		    "optional" : false,
		],
		"popup" : $[
		    "widget" : `textentry,
		],
	    ],
/*	    "DocumentRoot" : $[
		"table" : $[
		    // table cell
		    "label" : _("Document Root"),
		    "optional" : false,
		    "immutable" : true,
		],
		"popup" : $[
		    "widget" : `textentry,
		],
            ],*/
	    "ServerAdmin" : $[
		"table" : $[
		    // table cell
		    "label" : _("Server Administrator E-Mail"),
		    "optional" : false,
		],
		"popup" : $[
		    "widget" : `textentry,
		],
            ],
	];

define void HostInit (any key);

global map<string, any> hostwidget = (map<string, any>)TablePopup::CreateTableDescr (
	    $["add_delete" : true, 
	      "up_down" : false, 
	      "unique_keys" : true]
	, $[
	    "init" : HttpServerWidgets::HostInit,
	    "handle" : HttpServerWidgets::handleHostTable,
	    "options" : popups,
	    "ids" : HttpServerWidgets::HostTableContents,
	    "fallback" : $[
		"init" : HttpServerWidgets::DefaultHostPopupInit,
		"store" : HttpServerWidgets::DefaultHostPopupStore,
		"summary" : HttpServerWidgets::HostTableEntrySummary,
	    ],
	    "option_delete" : HttpServerWidgets::HostTableEntryDelete,
	    "add_items" : [ "ServerName", "ServerAdmin",],
	    "help" : HELPS["global_table"]:"",
	]);

define void HostInit (any key) ``{
    TablePopup::TableInit (HttpServerWidgets::hostwidget, key);
}


global map moduleslistwidget = $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		`Table (`id (`modules), `header (
		    // table header: module name
		    _("Name"),
		    // table header: module status
		    _("Status")+"    ",
		    // table header: module description
		    _("Description")
		), []),
		`HBox (
		    `PushButton (`id (`toggle),
		    // translators: toggle button label
			_("&Toggle Status") ),
		    `HStretch (),
		    `PushButton (`id (`add_user),
		    // translators: add user-defined module button label
			_("&Add Module") )
		)
	    ),
	    "init" : HttpServerWidgets::initModules,
	    "store" : HttpServerWidgets::storeModules,
	    "handle" : HttpServerWidgets::handleModules,
	    "help" : HELPS["modules"]:"",
	];

global map listenwidget = $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		// translators: radio button group label
		`Left(`Label( _("Listen on Ports:") ) ),
		`Table (`id (`listen), `header (
		    // table header
		    _("Network Address"),
		    // table header
		    _("Port")
		), []),
		`HBox (
		    `PushButton (`id (`add), `opt (`key_F3),
			Label::AddButton ()),
		    `PushButton (`id (`edit), `opt (`key_F4),
			Label::EditButton ()),
		    `PushButton (`id (`delete), `opt (`key_F5),
			Label::DeleteButton ()),
		    `HStretch ()
		)
	    ),
	    "init" : HttpServerWidgets::initListenSettings,
	    "store" : HttpServerWidgets::storeListenSettings,
	    "handle" : HttpServerWidgets::handleListenSettings,
	    "help" : HELPS["listen"]:"",
	];
/**
 * Map of widgets for CWM
 */
global map widgets = $[
	    "server_enable" : $[
		"widget" : `radio_buttons,
		// translator: server enable/disable radio button group
		"label"	 : _("HTTP &Service"),
		"items"	 : [
		    // translators: service status radio button label
		    [ "disabled", _("Disabled") ],
		    // translators: service status radio button label
		    [ "enabled", _("Enabled") ]
		],
		"init"	: HttpServerWidgets::initServiceStatus,
		"handle" : HttpServerWidgets::handleServiceStatus,
		"store"	 : HttpServerWidgets::storeServiceStatus,
		"handle_events" : [ "enabled", "disabled" ],
		"opt" : [ `notify ],
		"help" : HELPS["server_enable"]:"",
	    ],
	    "firewall_adapt" : $[
		"widget" : `checkbox,
		// translators: checkbox label
		"label"	 : _("Adapt &Firewall"),
		"help"	 : HELPS["firewall_adapt"]:"",
		"init"	: HttpServerWidgets::initAdaptFirewall,
		"store"	 : HttpServerWidgets::storeAdaptFirewall,
	    ],
	    "host" : hostwidget,
	    "modules" : moduleslistwidget,
	    "listen" : listenwidget,
	    "overview_widget" : overview_widget,
	    "hosts"	: hosts_widget,
	];

/********************************** helpers *******************************/


/**
 * Convert a Listen string to an item for table. Splits by the colon.
 *
 * @param arg		the Listen map
 * @param id		the id of this item
 * @return term		term for the table
 */
global define term listen2item( map<string,string> arg, integer id ) ``{

    string address = arg["ADDRESS"]: _("All Addresses");
    string port = arg["PORT"]:"80";
    
    return `item( `id(id), address, port );
}

/**
 * Convert a Listen string to a pair: $[ "port": port, "address": network ]
 *
 * @param arg		the Listen string
 * @return map		map with the result
 */
global define map listen2map( string arg ) ``{
    integer colon = find( arg, ":" );

    string address = "all";
    string port = arg;
    
    if( colon != -1 ) {
	// address is present
	address = substring( arg, 0, colon );
	port = substring( arg, colon+1 );
    }
    return $[ "port": port, "address": address ];
}

/**
 * Convert a Listen string to an item for table. Splits by the colon.
 *
 * @param network	network address
 * @param port		port number
 * @return string 	Listen value
 */
define string item2listen( string network, string port ) ``{

    if( network == _("All Addresses") ) network = "";
    
    if( size(network) > 0 ) port = network +":"+ port ;
    
    return port;
}

/**
 * Generate list of configured log files. First, use sysconfig and then as at lower priority
 * use CustomLog from httpd.conf files.
 *
 * @param access_logs	string containing configured access_log
 * @param custom_logs	list of other configured logs
 * @return list		list of all configured logs ordered by priority
 */
global define list GetLogs( string access_logs, list custom_logs ) ``{

    // initialize using access_logs
    list result = maplist( string value, splitstring( access_logs, "," ), ``( String::CutBlanks( value ) ) );

    foreach( string log, custom_logs, ``{
	string l = String::CutBlanks( log );
	if( ! contains( result, l ) ) result = add( result, l );
    });
    
    return result;
}

/******************************** Listen popup ****************************/

    /**
     * Show a popup for editing Listen statement.
     *
     * @param network 	initial value for the network part of the statement
     *                  If empty or _("All Addresses"), considered for all Listen for all interfaces.
     * @param port	initial value for a port number
     * @return string	the new Listen statement or nil if Cancel was pressed
     */
    define string AskListen( string network, string port ) ``{
	// translators: all network addresses Listen type
	boolean adr_type = ( network == _("All Addresses") || network == "" );
	if( port == nil ) port = "";
	
	// translators: Listen type for all addresses;
	string aa =  _("All Addresses");
	
	list ips = []; // FIXME: union( [ aa ], maplist( string ip, string dev, HttpServer::ip2device, ``( ip ) ) );

	UI::OpenDialog( `VBox(
	    // translators: text entry label
	    `TextEntry( `id(`port), _("&Port:"), port ),
	    // translators: combo box label for list of configured IPs
	    `Left( `ComboBox( `id(`address), _("Network &Address:"), ips ) ),
	    `VSpacing(),
	    `HBox( 
		`PushButton( `id(`ok), Label::OKButton() ),
		`PushButton( `id(`cancel), Label::CancelButton() )
	     )
	));
	
	if( !adr_type ) {
	    UI::ChangeWidget( `id( `address ), `Value, network );
	}
	
	symbol ret = nil;
	string network = nil;
	string res = "";
	do {

	    ret = (symbol) UI::UserInput();
	    
	    if( ret == `ok ) {
		network = (string)UI::QueryWidget( `id(`address), `Value );
		res = (string)UI::QueryWidget( `id(`port), `Value );
		boolean single_address = ( network != aa );
		
		// validation
		if( ! regexpmatch( res, "^[ \t]*[0-9]+[ \t]*$" ) ) {
		    // translators: error message when validating Listen statement
		    Popup::Error( _("Invalid port number.") );
		    ret = nil;
		    continue;
		}
		
		if( size(network) != 0 && single_address ) {
		    res = network +":"+ res;
		}
	    }
	} while( ret != `ok && ret != `cancel );
	
	if( ret == `cancel ) res = nil;
	
	UI::CloseDialog();
	
	return res;
    }	
    
// *************************************** log popups **************************

    /**
      * Handle function of the access log button (the first defined access log file)
      * @param key any key of the widget
      * @param event map event that occured
      * @return value for wizard sequencer, always nil
      */
    global define symbol showAccessLogPopup (any key, map event) {
	string log = (string) select( GetLogs( HttpServer::settings["apache_access_log"]:"",  HttpServer::settings[currenthost, "CustomLog"]:[] ), 0, "/var/log/apache2/access_log" );

	// strip the log format, if present
	log = select( splitstring( log, " " ), 0, "/var/log/apache2/access_log" );

	LogView::Display ($[
	    "command" : sformat( "tail -f %1 -n 100 | /usr/sbin/logresolve2", log ),
	    "save" : true,
	    "actions" : [
		// menubutton entry, try to keep short
		[ _("&Reload HTTP Server"),
		    ``{SCR::Execute (.target.bash,
			"rcapache2 reload");}],
		// menubutton entry, try to keep short
		[ _("Save Settings and Re&start HTTP Server"),
		    HttpServer::Write, true ],
	    ],
	]);
	return nil;
    }

    /**
      * Handle function of the error log button
      * @param key any key of the widget
      * @param event map event that occured
      * @return value for wizard sequencer, always nil
      */
    global define symbol showErrorLogPopup (any key, map event) ``{
	string log = HttpServer::settings[currenthost, "ErrorLog"]: "/var/log/apache2/error_log";
	
	// strip the log format, if present
	log = select( splitstring( log, " " ), 0, "/var/log/apache2/error_log" );

	LogView::Display ($[
	    "command" : sformat( "tail -f -n +100  %1 | /usr/sbin/logresolve2", log ),
	    "save" : true,
	    "actions" : [
		// menubutton entry, try to keep short
		[ _("Reload HTTP Server"),
		    ``{SCR::Execute (.target.bash,
			"rcapache2 reload");}],
		// menubutton entry, try to keep short
		[ _("Save Settings and Restart HTTP Server"),
		    ``{HttpServer::Write ();} ],
	    ],
	]);
	return nil;
    }

// ************************************ default host table ********************

    /**
      * Function for getting contents of the default host table
      * @param descr map description map of the table
      * @return list of items for the table
      */
    global define list HostTableContents (map descr) ``{
	list ret = maplist (map<string, any> option, HTTPD::GetHost(currenthost), ``(option["KEY"]:_("<unknown>")));

	// filter out unneeded options
	ret = filter (string key, ret, ``( ! contains( ["_SECTION"], key )));
	// FIXME: replace VirtualByName
	// required entries
	ret = union (["ServerName", "ServerAdmin" ], ret);
	return ret;
    }
    
    /**
      * Delete function of the global table
      * @param opt_id any option id of selected option
      * @param opt_key any option key of selected option
      * @return boolean true if was really deleted
      */
    global define boolean HostTableEntryDelete (any opt_id, any opt_key) ``{
	// message popup
	if (! Popup::YesNo (_("Delete selected entry?")))
	    return false;
	HttpServer::settings[currenthost]
	    = filter (string k, any v, HttpServer::settings[currenthost]:$[], ``(k != opt_id));
	return true;
    }

    /**
     *  Handler for editing default host. Handles additional buttons, like logs and modules.
     *  Rest is passed to TablePopup::TableHandle.
     *
     *  @param key	the key modified
     *  @param event	event description
     *  @return symbol 	the result of the handling
     */
    global define symbol handleHostTable( any key, map event ) ``{
	// handle menu button entries
	if( event["ID"]:nil == `show_access_log ) {
	    return showAccessLogPopup( key, event );
	}
	else if( event["ID"]:nil == `show_error_log ) {
	    return showErrorLogPopup( key, event );
	}

	// default handling
	return TablePopup::TableHandle( widgets["global_table"]:$[], key, event );
    }

    /**
      * Fallback initialization function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void DefaultHostPopupInit (any opt_id, any opt_key) ``{
	UI::ChangeWidget (`id (opt_key), `Value,
	    get_host_value( (string)opt_key, HTTPD::GetHost(currenthost)));
	UI::SetFocus (`id (opt_key));
    }

    /**
      * Fallback store function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void DefaultHostPopupStore (any opt_id, any opt_key) ``{
	HttpServer::settings[currenthost, opt_key] = UI::QueryWidget (`id (opt_key), `Value);
	HttpServer::modified = true;
    }

    /**
      * Fallback summary function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      * @return string table entry summary
      */
    global define string HostTableEntrySummary (any opt_id, any opt_key) ``{
	string res = get_host_value( (string)opt_key, HTTPD::GetHost(currenthost));
	if (opt_key == "SSL")
	{
	    if (res == "0") 
	    {
		res = _("No SSL");
	    }
	    else if (res == "1")
	    {
		res = _("Enabled");
	    }
	    else if (res == "2")
	    {
		res = _("Required");
	    }
	}
	else if (opt_key == "VirtualByName")
	{
	    if (res == "0")
	    {
		res = _("Resolution via HTTP headers");
	    }
	    else 
	    {
		res = _("Resolution via used IP address");
	    }
	}
	return res;
    }


// ************************************ modules list ***************************

    /**
      * Initialize function of a widget
      * @param key any widget key of widget that is processed
      */
    global define void initModules (any key) ``{
	integer index = -1;
	list items = maplist (string mod, map z, HttpServer::settings["modules"]:$[], ``{
	    index = index + 1;
	    return `item (`id (index), mod, z["status"]:false ? _("Enabled") : _("Disabled"), z["description"]:"" );
	});
	UI::ChangeWidget (`id (`modules), `Items, items);
	UI::SetFocus (`id (`modules));
    }

    /**
      * Store function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      */
    global define void storeModules (any key, map event) ``{
	integer i = size(HttpServer::settings["modules"]:$[]);
	while( i>0 ) {
	    term item = (term) UI::QueryWidget( `id(`modules), `Item(i-1) );
	    string mod = select( item, 1, "" );
	    y2debug( "Changing %1 to %2", mod, (select( item, 2, "" ) == _("Enabled") ) );
	    HttpServer::settings["modules", mod, "status"] = (select( item, 2, "" ) == _("Enabled") );	
	    i = i-1;
	    // FIXME: this needs to care about flags as well (SSL)
	}
	
	y2debug( "%1", HttpServer::settings["modules"]:$[] );
    }

    /**
      * Handle function of a widget
      * @param key any widget key of widget that is processed
      * @param event any event that occured
      * @return symbol symbol for WS or nil
      */
    global define symbol handleModules (any key, map event) ``{
	UI::SetFocus (`id (`modules));
	integer current = (integer) UI::QueryWidget (`id (`modules), `CurrentItem);
        if (event["ID"]:nil == `toggle)
        {
	    integer ci = (integer) UI::QueryWidget( `id( `modules ), `CurrentItem );
	    string status = (string) select( (list) UI::QueryWidget( `id(`modules), `Item(ci) ), 2, _("Enabled") );
	    string name = (string) select( (list) UI::QueryWidget( `id(`modules), `Item(ci) ), 1, nil );

	    y2debug( "Status of module: %1", status );
	    if( status == _("Enabled") ) status = _("Disabled");
	    else status = _("Enabled");
	    UI::ChangeWidget( `id( `modules ), `Item( ci , 1 ) , status );
	    
	    HttpServer::modules_modified = union( HttpServer::modules_modified, [name] );
	    y2debug( "modified_modules now: %1", HttpServer::modules_modified );
	    
	    HttpServer::modified = true;
        }
	else if (event["ID"]:nil == `add_user)
        {
	   UI::OpenDialog(
            `VBox(
		// translators: text entry label for adding a user-defined module
                `TextEntry(`id(`mod), _("New Module &Name:")),
                `HBox(
                    `PushButton(`id(`ok), `opt(`default), Label::OKButton() ),
                    `PushButton(`id(`cancel), Label::CancelButton() )
            	    )
        	)
    	    );
	    
	    UI::SetFocus( `id( `mod ) );

	    symbol ret = (symbol) UI::UserInput();
	    
	    if( ret == `ok ) {
		string mod = String::CutBlanks( (string) UI::QueryWidget( `id(`mod), `Value ) );
		if( mod == "" ) {
		    // translators: error message
		    Report::Error( _("A name for the module to add is required.") );
		    UI::CloseDialog();
		} else if( haskey( HttpServer::settings["modules"]:$[], mod )  ) {
		    // translators: error message
		    Report::Error( _("The module is already in the list.") );
		    UI::CloseDialog();
		} else {
		    HttpServer::settings["modules", mod] = $[
			"status" : true,
			"description" :  _("User-Defined Module"),
		    ];

		    HttpServer::modified = true;
		    HttpServer::modules_modified = union( HttpServer::modules_modified, [mod] );
		    
		    UI::CloseDialog();
		    
		    HttpServerWidgets::initModules(nil);
		}
	    }
	    else UI::CloseDialog();
        }

    }

// ************************************ listen settings ************************

    /**
      * Initialize function of a widget
      * @param key any widget key of widget that is processed
      */
    global define void initListenSettings (any key) ``{

	integer id = -1;
	list listen = HTTPD::GetCurrentListen();
	list items = maplist( map<string,string> litem, listen, ``{ id = id+1; return listen2item(litem, id); } );
	UI::ChangeWidget (`id (`listen), `Items, items);
	
	// enable/disable buttons - at least single Listen must be present
	UI::ChangeWidget (`id (`delete), `Enabled, size( listen ) > 1 );
	
	// set focus
	UI::SetFocus (`id (`listen));
    }

    /**
      * Store function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      */
    global define void storeListenSettings (any key, map event) ``{
	integer i = size(HttpServer::settings["Listen"]:[]);
	list newlisten = [];
	while( i>0 ) {
	    term item = (term) UI::QueryWidget( `id(`listen), `Item(i-1) );
	    newlisten = add( newlisten, item2listen( select(item,1,""), select(item,2,"") ) );
	    i = i-1;
	}
	
	HttpServer::modified = (HttpServer::settings["Listen"]:[] == newlisten );
	HttpServer::settings["Listen"] = newlisten;
    }

    /**
      * Handle function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      * @return symbol symbol for WS or nil
      */
    global define symbol handleListenSettings (any key, map event) ``{
	UI::SetFocus (`id (`listen));
	integer current = (integer) UI::QueryWidget (`id (`listen), `CurrentItem);
	term currentitem = (term) UI::QueryWidget( `id(`listen), `Item(current) );
	string network = (string) currentitem[1]:nil;
	// translators: all network addresses Listen type
	if( network == _("All Addresses") ) network = "";
	string port = select(currentitem, 2, "");

        if (event["ID"]:nil == `add)
        {
	    // translators: all network addresses Listen type
	    string res = AskListen( _("All Addresses"), "" );
	    if( res != nil ) {
		if( contains( HttpServer::settings["Listen"]:[], res )  )
		{
		    // translators: error message for adding a new Listen statement
		    Popup::Error( sformat(_("The entry '%1' already exists."), res) );
		} 
		else
		{
		    HttpServer::settings["Listen"] = 
			add( HttpServer::settings["Listen"]:[], res );
		}
	    }
        }
	else if( event["ID"]:nil == `delete )
	{
	    // FIXME: ensure there is at least one listen statement
	    boolean validate = size( HttpServer::settings["Listen"]:[] ) != 0;

	    y2debug( "Validation result: %1", validate );
	
	    if( !validate ) {
		Popup::Error(_("The list of the ports to which the server should
listen cannot be empty.
") );
	    return nil;
	    }

	    string res = item2listen( network, port );
	    HttpServer::settings["Listen"] = 
		filter( string litem, HttpServer::settings["Listen"]:[], ``(litem != res) );
	}
	else if( event["ID"]:nil == `edit )
	{
	    string res = AskListen( network, port );
	    if( res != nil ) {
		HttpServer::settings["Listen"] = add( 
		    filter( string litem, HttpServer::settings["Listen"]:[], ``(litem != item2listen(network, port)) ),
		    res );
	    }
	}
	
	initListenSettings(nil);
    }

    
// ************************************ server status ***********************

    /**
      * Initialize function of a widget
      * @param key any widget key of widget that is processed
      */
    global define void initServiceStatus (any key) ``{
	if( HttpServer::settings["enabled"]:false  ) {
	    UI::ChangeWidget (`id ("enabled"), `Value, true);
	}
	else 
	{
	    UI::ChangeWidget (`id ("disabled"), `Value, true);
	}
    }

    /**
      * Store function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      */
    global define void storeServiceStatus (any key, map event) ``{
	HttpServer::enableService( (boolean) UI::QueryWidget ( `id("enabled"), `Value ) );
    }

    /**
      * Handle function of a widget
      * @param key any widget key of widget that is processed
      * @param event map event that occured
      * @return symbol symbol for WS or nil
      */
    global define symbol handleServiceStatus (any key, map event) ``{
	boolean current = (boolean) UI::QueryWidget (`id ("enabled"), `Value);
	HttpServer::settings["enabled"] = current;
    }
// *********************************** Listen widget ***************************

// ************************************ Adapt firewall widget ********************

    /**
      * Initialization function for firewall adapting
      * @param key any option key to be initialized
      */
    global define void initAdaptFirewall (any key) ``{
	if( HttpServer::settings["settings", "firewall_started"]:false ) {
	    UI::ChangeWidget (`id (key), `Value,
		HttpServer::settings["settings", "firewall"]:false);
	} else {
	    // disable the widget
	    UI::ChangeWidget (`id (key), `Enabled, false );
	}
    }

    /**
      * Store function for firewall adapting
      * @param opt_id any option id
      * @param event map event description
      */
    global define void storeAdaptFirewall (any opt_id, map event) ``{
	if( HttpServer::settings["settings", "firewall_started"]:false ) {
	    HttpServer::settings["settings", "firewall"] = UI::QueryWidget (`id (opt_id), `Value);
	    HttpServer::modified = true;
	}
    }

/* EOF */
}

